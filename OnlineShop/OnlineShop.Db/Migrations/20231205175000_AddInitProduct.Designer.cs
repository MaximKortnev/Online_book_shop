// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShop.Db;

#nullable disable

namespace OnlineShop.Db.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231205175000_AddInitProduct")]
    partial class AddInitProduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnlineShop.Db.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Comparison", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Comparisons");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TotalCost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutAuthor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutTheBook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ea1f35a-f68b-4e17-8a92-65c70c934040"),
                            AboutAuthor = "Толстой Алексей Николаевич – прозаик, поэт. Родился 29 декабря 1882 года в городе Николаевске Самарской губернии. После окончания реального училища в Самаре поступил на отделение механики Технологического института, но незадолго до окончания бросает его, окончательно решив посвятить себя литературному труду.",
                            AboutTheBook = "Озорной мальчишка с длинным носом, Буратино, на протяжении 85 лет вновь и вновь зовёт детей отправиться в сказочное приключение. Вы побываете в Стране Дураков вместе с котом Базилио и лисой Алисой, погостите у прекрасной Мальвины, познакомитесь с черепахой Тортилой, перехитрите ужасного Карабаса Барабаса, и конечно же, раскроете тайну Золотого Ключика.",
                            Author = "Алексей Толстой",
                            Cost = 20m,
                            Description = "Невероятная история о деревянном мальчике",
                            ImagePath = "image.jpg",
                            Name = "Приключения Буратино",
                            Quote = "Считаю до трёх, а потом как дам больно!"
                        },
                        new
                        {
                            Id = new Guid("72a89d77-7676-4527-970f-46d6a4f28e0c"),
                            AboutAuthor = "Толстой Алексей Николаевич – прозаик, поэт. Родился 29 декабря 1882 года в городе Николаевске Самарской губернии. После окончания реального училища в Самаре поступил на отделение механики Технологического института, но незадолго до окончания бросает его, окончательно решив посвятить себя литературному труду.",
                            AboutTheBook = "Озорной мальчишка с длинным носом, Буратино, на протяжении 85 лет вновь и вновь зовёт детей отправиться в сказочное приключение. Вы побываете в Стране Дураков вместе с котом Базилио и лисой Алисой, погостите у прекрасной Мальвины, познакомитесь с черепахой Тортилой, перехитрите ужасного Карабаса Барабаса, и конечно же, раскроете тайну Золотого Ключика.",
                            Author = "Льюис Кэрролл",
                            Cost = 15.99m,
                            Description = "Книга о приключениях девочки Асилы и о неведомых чудесах созданных Льюисом Кэрроллом ",
                            ImagePath = "image.jpg",
                            Name = "Алиса в стране чудес",
                            Quote = "Считаю до трёх, а потом как дам больно!"
                        },
                        new
                        {
                            Id = new Guid("f36c10ca-f56f-4f8e-bcce-adbf7d0fc1c2"),
                            AboutAuthor = "Толстой Алексей Николаевич – прозаик, поэт. Родился 29 декабря 1882 года в городе Николаевске Самарской губернии. После окончания реального училища в Самаре поступил на отделение механики Технологического института, но незадолго до окончания бросает его, окончательно решив посвятить себя литературному труду.",
                            AboutTheBook = "Озорной мальчишка с длинным носом, Буратино, на протяжении 85 лет вновь и вновь зовёт детей отправиться в сказочное приключение. Вы побываете в Стране Дураков вместе с котом Базилио и лисой Алисой, погостите у прекрасной Мальвины, познакомитесь с черепахой Тортилой, перехитрите ужасного Карабаса Барабаса, и конечно же, раскроете тайну Золотого Ключика.",
                            Author = "Аполина Андреевна",
                            Cost = 15m,
                            Description = "Биографическая книга о мыслях и жизни девушки по имени Марта",
                            ImagePath = "image.jpg",
                            Name = "Марта",
                            Quote = "Считаю до трёх, а потом как дам больно!"
                        },
                        new
                        {
                            Id = new Guid("5778dfd6-362d-45e8-aeaf-75278d109b06"),
                            AboutAuthor = "Толстой Алексей Николаевич – прозаик, поэт. Родился 29 декабря 1882 года в городе Николаевске Самарской губернии. После окончания реального училища в Самаре поступил на отделение механики Технологического института, но незадолго до окончания бросает его, окончательно решив посвятить себя литературному труду.",
                            AboutTheBook = "Озорной мальчишка с длинным носом, Буратино, на протяжении 85 лет вновь и вновь зовёт детей отправиться в сказочное приключение. Вы побываете в Стране Дураков вместе с котом Базилио и лисой Алисой, погостите у прекрасной Мальвины, познакомитесь с черепахой Тортилой, перехитрите ужасного Карабаса Барабаса, и конечно же, раскроете тайну Золотого Ключика.",
                            Author = "Жан Пьер Мюри",
                            Cost = 45.2m,
                            Description = "Жан Пьер Мюри, одна из выдающихся личностей прошлого столетия",
                            ImagePath = "image.jpg",
                            Name = "Жан Пьер Мюри. Автобиография",
                            Quote = "Считаю до трёх, а потом как дам больно!"
                        });
                });

            modelBuilder.Entity("OnlineShop.Db.Models.CartItem", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShop.Db.Models.Order", null)
                        .WithMany("ListProducts")
                        .HasForeignKey("OrderId");

                    b.HasOne("OnlineShop.Db.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Comparison", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Favorite", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Order", b =>
                {
                    b.Navigation("ListProducts");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Product", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
